// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Wappirest.Data.Models;

namespace Wappirest.Data.Models
{
    public partial class FacturaDbContext
    {
        private IFacturaDbContextProcedures _procedures;

        public virtual IFacturaDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FacturaDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IFacturaDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class FacturaDbContextProcedures : IFacturaDbContextProcedures
    {
        private readonly FacturaDbContext _context;

        public FacturaDbContextProcedures(FacturaDbContext context)
        {
            _context = context;
        }

        public virtual async Task<int> SP_GUARDAR_PRODUCTOAsync(int? codigo, string nombre, int? stock, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 20,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stock",
                    Value = stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_GUARDAR_PRODUCTO] @codigo = @codigo, @nombre = @nombre, @stock = @stock", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_INSERTAR_DETALLEAsync(int? presupuesto, int? id_detalle, int? producto, int? cantidad, double? precio, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "presupuesto",
                    Value = presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_detalle",
                    Value = id_detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "producto",
                    Value = producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cantidad",
                    Value = cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "precio",
                    Value = precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_INSERTAR_DETALLE] @presupuesto = @presupuesto, @id_detalle = @id_detalle, @producto = @producto, @cantidad = @cantidad, @precio = @precio", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_INSERTAR_MAESTROAsync(string cliente, int? vigencia, OutputParameter<int?> id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cliente",
                    Size = 50,
                    Value = cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vigencia",
                    Value = vigencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterid,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_INSERTAR_MAESTRO] @cliente = @cliente, @vigencia = @vigencia, @id = @id OUTPUT", sqlParameters, cancellationToken);

            id?.SetValue(parameterid.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_RECUPERAR_PRODUCTO_POR_CODIGOResult>> SP_RECUPERAR_PRODUCTO_POR_CODIGOAsync(int? codigo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SP_RECUPERAR_PRODUCTO_POR_CODIGOResult>("EXEC @returnValue = [dbo].[SP_RECUPERAR_PRODUCTO_POR_CODIGO] @codigo = @codigo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_RECUPERAR_PRODUCTOSResult>> SP_RECUPERAR_PRODUCTOSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SP_RECUPERAR_PRODUCTOSResult>("EXEC @returnValue = [dbo].[SP_RECUPERAR_PRODUCTOS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_REGISTRAR_BAJA_PRODUCTOAsync(int? codigo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_REGISTRAR_BAJA_PRODUCTO] @codigo = @codigo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
